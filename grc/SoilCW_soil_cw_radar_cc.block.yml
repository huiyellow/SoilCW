id: SoilCW_soil_cw_radar_cc
label: soil_cw_radar_cc
category: '[SoilCW]'

templates:
  imports: from gnuradio import SoilCW
  make: SoilCW.soil_cw_radar_cc(${main_freq}, ${delta_f}, ${samp_rate}, ${rx_gain}, ${tx_gain}, ${ref_gain}, ${enable_biastee}, ${baseband_amp}, ${baseband_freq})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: main_freq
  label: main CW frequency
  dtype: int
- id: delta_f
  label: frequency difference
  dtype: int
- id: samp_rate
  label: sampling rate
  dtype: int
- id: rx_gain
  label: gain of radar rx
  dtype: int
- id: tx_gain
  label: gain of radar tx
  dtype: int
- id: ref_gain
  label: gain of reference tx/rx
  dtype: int
- id: enable_biastee
  label: enable biastee for radar TX/RX
  dtype: int
- id: baseband_amp
  label: amplitude of baseband signal
  dtype: float
- id: baseband_freq
  label: frequency of baseband signal
  dtype: float
#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...
- label: scan
  domain: message

outputs:
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...
- label: out0
  domain: stream
  dtype: complex
- label: out1
  domain: stream
  dtype: complex

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
