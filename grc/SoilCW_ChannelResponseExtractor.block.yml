id: SoilCW_ChannelResponseExtractor
label: ChannelResponseExtractor
category: '[SoilCW]'

templates:
  imports: from gnuradio import SoilCW
  make: SoilCW.ChannelResponseExtractor(${recv_len},${num_drops},${dir},${f_c},${delta_f},${d_g},${d_m},${cable_length},${cable_speed_factor})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: recv_len
  label: number of samples 
  dtype: int
- id: num_drops
  label: number of samples to drop 
  dtype: int
- id: dir
  label: data dirctory 
  dtype: string
- id: f_c
  label: main frequency
  dtype: int
- id: delta_f
  label: delta_f
  dtype: int
- id: d_g
  label: d_g
  dtype: float
- id: d_m
  label: d_m
  dtype: float
- id: cable_length
  label: cable_length
  dtype: float
- id: cable_speed_factor
  label: cable_speed_factor
  dtype: float
#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: rx
  domain: stream
  dtype: complex
  vlen: ${recv_len} 
- label: ref
  domain: stream
  dtype: complex
  vlen: ${recv_len} 

outputs:
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...
- label: out
  domain: stream
  dtype: complex

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
